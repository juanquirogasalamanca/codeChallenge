//
//  ResultScreenViewController.swift
//  gitHubApi
//
//  Created by Juan Guillermo Quiroga Salamanca on 11/5/19.
//  Copyright (c) 2019 Juan Guillermo Quiroga Salamanca. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ResultScreenDisplayLogic: class
{
    func displayResults(viewModel: [ResultScreen.UserList.ViewModel])
}

class ResultScreenViewController: UIViewController, ResultScreenDisplayLogic
{
  var interactor: ResultScreenBusinessLogic?
  var router: (NSObjectProtocol & ResultScreenRoutingLogic & ResultScreenDataPassing)?
  var displayedResutls : [SearchScreen.User.ViewModel] = []

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ResultScreenInteractor()
    let presenter = ResultScreenPresenter()
    let router = ResultScreenRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor

  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    loadResults()
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var numberOfResults: UILabel!
    
    
  func loadResults()
  {
   
    //print(viewController.router?.dataStore?.results.count)
    
   // let request = ResultScreen.Something.Request()
//    interactor?.listResutls(request: (self.router?.dataStore!.results)!)
    displayedResutls = (self.router?.dataStore!.results)!
    numberOfResults.text = "Listing \(displayedResutls.count) results."
    
  }
  
  func displayResults(viewModel: [ResultScreen.UserList.ViewModel])
  {
    //nameTextField.text = viewModel.name
  }
    

}

extension ResultScreenViewController : UITableViewDelegate{
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        router?.dataStore?.result = displayedResutls[indexPath.row]
        self.interactor?.listResutls(request: displayedResutls[indexPath.row])
        self.router?.routeToDetails(segue: nil)
        
        
    }
}

extension ResultScreenViewController : UITableViewDataSource{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedResutls.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell()
        let item = displayedResutls[indexPath.row]
        cell.textLabel?.text = item.login
        
        return cell
    }
    
    
}
